{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-card/util.js", "../../../../../../node_modules/ngx-card/inputs.js", "../../../../../../node_modules/ngx-card/card.js", "../../../../../../node_modules/ngx-card/module.js"],
  "sourcesContent": ["// Generate a unique id (unique within the entire client session).\n// Useful for temporary DOM ids.\n// Generate a unique id (unique within the entire client session).\nexport var uniqueId = (function () {\n    var idCounter = 0;\n    return function (prefix) {\n        if (prefix === void 0) { prefix = 'uid'; }\n        return \"card_\" + prefix + \"_\" + ++idCounter;\n    };\n}());\n", "import { Directive, ElementRef, Attribute } from '@angular/core';\nimport { uniqueId } from './util';\nvar NgxCardNumberTemplate = (function () {\n    function NgxCardNumberTemplate(elementRef, name) {\n        this.elementRef = elementRef;\n        this.name = name;\n    }\n    NgxCardNumberTemplate.prototype.ngOnInit = function () {\n        this.name = this.name || uniqueId('number');\n    };\n    return NgxCardNumberTemplate;\n}());\nexport { NgxCardNumberTemplate };\nNgxCardNumberTemplate.decorators = [\n    { type: Directive, args: [{\n                selector: '[card-number]',\n                host: {\n                    '[name]': 'name',\n                },\n            },] },\n];\n/** @nocollapse */\nNgxCardNumberTemplate.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },\n]; };\nvar NgxCardNameTemplate = (function () {\n    function NgxCardNameTemplate(elementRef, name) {\n        this.elementRef = elementRef;\n        this.name = name;\n    }\n    NgxCardNameTemplate.prototype.ngOnInit = function () {\n        this.name = this.name || uniqueId('name');\n    };\n    return NgxCardNameTemplate;\n}());\nexport { NgxCardNameTemplate };\nNgxCardNameTemplate.decorators = [\n    { type: Directive, args: [{\n                selector: '[card-name]',\n                host: {\n                    '[name]': 'name',\n                },\n            },] },\n];\n/** @nocollapse */\nNgxCardNameTemplate.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },\n]; };\nvar NgxCardExpiryTemplate = (function () {\n    function NgxCardExpiryTemplate(elementRef, name) {\n        this.elementRef = elementRef;\n        this.name = name;\n    }\n    NgxCardExpiryTemplate.prototype.ngOnInit = function () {\n        this.name = this.name || uniqueId('expiry');\n    };\n    return NgxCardExpiryTemplate;\n}());\nexport { NgxCardExpiryTemplate };\nNgxCardExpiryTemplate.decorators = [\n    { type: Directive, args: [{\n                selector: '[card-expiry]',\n                host: {\n                    '[name]': 'name',\n                },\n            },] },\n];\n/** @nocollapse */\nNgxCardExpiryTemplate.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },\n]; };\nvar NgxCardCvcTemplate = (function () {\n    function NgxCardCvcTemplate(elementRef, name) {\n        this.elementRef = elementRef;\n        this.name = name;\n    }\n    NgxCardCvcTemplate.prototype.ngOnInit = function () {\n        this.name = this.name || uniqueId('cvc');\n    };\n    return NgxCardCvcTemplate;\n}());\nexport { NgxCardCvcTemplate };\nNgxCardCvcTemplate.decorators = [\n    { type: Directive, args: [{\n                selector: '[card-cvc]',\n                host: {\n                    '[name]': 'name',\n                },\n            },] },\n];\n/** @nocollapse */\nNgxCardCvcTemplate.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },\n]; };\n", "import { Directive, Input, ContentChildren, ElementRef } from '@angular/core';\nimport { NgxCardNumberTemplate, NgxCardNameTemplate, NgxCardExpiryTemplate, NgxCardCvcTemplate } from './inputs';\nvar defaultPlaceholders = {\n    number: '•••• •••• •••• ••••',\n    name: 'Full Name',\n    expiry: '••/••',\n    cvc: '•••',\n};\nvar defaultMessages = {\n    validDate: 'valid\\nthru',\n    monthYear: 'month/year',\n};\nvar NgxCard = (function () {\n    function NgxCard(element) {\n        this.element = element;\n        this.formatting = true; // optional - default true\n        // if true, will log helpful messages for setting up Card\n        this.debug = false; // optional - default false\n    }\n    Object.defineProperty(NgxCard.prototype, \"messages\", {\n        get: function () {\n            return this._messages;\n        },\n        set: function (_messages) {\n            this._messages = Object.assign({}, defaultMessages, _messages);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxCard.prototype, \"placeholders\", {\n        get: function () {\n            return this._placeholders;\n        },\n        set: function (_placeholders) {\n            this._placeholders = Object.assign({}, defaultPlaceholders, _placeholders);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxCard.prototype.ngAfterViewInit = function () {\n        new Card({\n            form: this.element.nativeElement,\n            container: this.container,\n            width: this.width,\n            formSelectors: {\n                numberInput: this.findSelectors(this.numbers),\n                expiryInput: this.findSelectors(this.expiries),\n                cvcInput: this.findSelectors(this.cvcs),\n                nameInput: this.findSelectors(this.names),\n            },\n            formatting: this.formatting,\n            messages: this.messages,\n            placeholders: this.placeholders,\n            masks: this.masks,\n            debug: this.debug,\n        });\n    };\n    NgxCard.prototype.findSelectors = function (list) {\n        return list.map(function (template) { return template.elementRef.nativeElement.tagName.toLowerCase() + '[name=\"' + template.name + '\"]'; })\n            .join(', ');\n    };\n    return NgxCard;\n}());\nexport { NgxCard };\nNgxCard.decorators = [\n    { type: Directive, args: [{\n                selector: '[card]',\n            },] },\n];\n/** @nocollapse */\nNgxCard.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\nNgxCard.propDecorators = {\n    'container': [{ type: Input },],\n    'width': [{ type: Input, args: ['card-width',] },],\n    'messages': [{ type: Input },],\n    'placeholders': [{ type: Input },],\n    'masks': [{ type: Input },],\n    'formatting': [{ type: Input },],\n    'debug': [{ type: Input },],\n    'numbers': [{ type: ContentChildren, args: [NgxCardNumberTemplate, { descendants: true },] },],\n    'names': [{ type: ContentChildren, args: [NgxCardNameTemplate, { descendants: true },] },],\n    'expiries': [{ type: ContentChildren, args: [NgxCardExpiryTemplate, { descendants: true },] },],\n    'cvcs': [{ type: ContentChildren, args: [NgxCardCvcTemplate, { descendants: true },] },],\n};\n;\n", "import { NgModule } from '@angular/core';\nimport { NgxCardNumberTemplate, NgxCardNameTemplate, NgxCardExpiryTemplate, NgxCardCvcTemplate } from './inputs';\nimport { NgxCard } from './card';\nvar CARD_DIRECTIVES = [\n    NgxCard,\n    NgxCardNumberTemplate,\n    NgxCardNameTemplate,\n    NgxCardExpiryTemplate,\n    NgxCardCvcTemplate,\n];\nvar CardModule = (function () {\n    function CardModule() {\n    }\n    return CardModule;\n}());\nexport { CardModule };\nCardModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CARD_DIRECTIVES],\n                exports: [CARD_DIRECTIVES],\n            },] },\n];\n/** @nocollapse */\nCardModule.ctorParameters = function () { return []; };\n"],
  "mappings": "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",
  "names": ["NgxCardNumberTemplate", "NgxCardNameTemplate", "NgxCardExpiryTemplate", "NgxCardCvcTemplate", "NgxCard", "CardModule"]
}
