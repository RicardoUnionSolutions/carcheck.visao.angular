---
description: Code Rules
globs:
alwaysApply: true
---


- # 🧹 Clean Code Principles

A set of rules to keep code **readable, maintainable, and scalable**.  
Use this as a quick-reference while coding.

---

## 📛 Naming
- Use **meaningful, descriptive names** for variables, functions, and classes.
- Names should **reveal intent**, not require comments.
- Avoid abbreviations unless universally known.

---

## 🔧 Functions
- Functions should be **small** and do **one thing only**.
- Keep the **number of parameters low** (ideally ≤ 3).
- Function names should be **expressive of their action**.

---

## 🏗 Classes & Objects
- **Single Responsibility Principle (SRP):** one reason to change.
- Keep classes **small and cohesive**.
- Encapsulate details, expose only what is necessary.

---

## 📐 SOLID Principles
- **S**: Single Responsibility Principle (SRP)  
- **O**: Open/Closed Principle (OCP)  
- **L**: Liskov Substitution Principle (LSP)  
- **I**: Interface Segregation Principle (ISP)  
- **D**: Dependency Inversion Principle (DIP)  

---

## 🔄 Code Practices
- **DRY** (Don’t Repeat Yourself): extract reusable logic.
- **KISS** (Keep It Simple, Stupid): avoid unnecessary complexity.
- **YAGNI** (You Aren’t Gonna Need It): don’t add until required.
- Prefer **readability over cleverness**.

---

## 💬 Comments
- Prefer **self-explanatory code** over comments.
- Use comments to explain **why**, not **what**.

---

## 🧪 Testing
- Write **unit tests** for core logic.
- Ensure code is **easy to test** (low coupling, high cohesion).
- Apply **refactoring continuously** without breaking tests.

---

## ⚠️ Error Handling
- Use **exceptions, not return codes**.
- Don’t ignore errors.
- Fail fast, fail loud when necessary.

---

## 🚨 Code Smells to Avoid
- Long functions.
- Large classes.
- Duplicate code.
- Excessive comments explaining bad code.
- Overuse of primitive types instead of domain models.

---
